namespace BD.Common8.SourceGenerator.Templates.Abstractions;

/// <summary>
/// 模板基类
/// </summary>
public abstract class TemplateBase
{
    /// <summary>
    /// 写入文件头
    /// </summary>
    /// <param name="stream"></param>
    protected void WriteFileHeader(
        Stream stream)
    {
        stream.Write(
"""
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。

"""u8);
        stream.WriteFormat(
"""
//     {0}

"""u8, GetType().FullName);
        stream.Write(
"""
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0079 // 请删除不必要的忽略
#pragma warning disable IDE0005 // 删除不必要的 using 指令
#pragma warning disable IDE1006 // 命名样式
#pragma warning disable SA1209 // Using alias directives should be placed after other using directives
#pragma warning disable SA1211 // Using alias directives should be ordered alphabetically by alias name
#pragma warning disable SA1600 // Elements should be documented

"""u8);
    }

    /// <summary>
    /// 写入命名空间
    /// </summary>
    /// <param name="stream"></param>
    /// <param name="namespace"></param>
    /// <param name="isFileNamespace"></param>
    /// <param name="isFirstWriteNamespace"></param>
    protected static void WriteNamespace(
        Stream stream,
        string @namespace,
        bool isFileNamespace = true,
        bool isFirstWriteNamespace = true)
    {
        if (isFirstWriteNamespace)
        {
            stream.Write(
    """
#pragma warning disable IDE0130 // 命名空间与文件夹结构不匹配

"""u8);
        }
        else
        {
            stream.WriteNewLine();
        }
        if (!string.IsNullOrWhiteSpace(@namespace))
        {
            stream.WriteFormat(
"""
﻿namespace {0}{1}

"""u8, @namespace, isFileNamespace ? ";" : "");
        }
    }

    static readonly Lazy<string> mFileVersion = new(() =>
    {
        var assembly = typeof(TemplateBase).Assembly;
        var fileVersion = assembly.GetCustomAttribute<AssemblyFileVersionAttribute>()?.Version;
        return fileVersion ?? string.Empty;
    });

    /// <summary>
    /// 获取当前源生成器的文件版本
    /// </summary>
    protected static string FileVersion => mFileVersion.Value;

    static Random? random;

    /// <inheritdoc cref="System.Random"/>
    protected static Random Random => random ??= new(Guid.NewGuid().GetHashCode());

    const string random_chars = "_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    /// <summary>
    /// 获取随机字段名
    /// </summary>
    /// <returns></returns>
    protected static string GetRandomFieldName()
    {
        var fieldName = "k__BackingField".ToCharArray();
        for (int i = 0; i < fieldName.Length / 2; i++)
        {
            var index = Random.Next(fieldName.Length);
            fieldName[index] = random_chars[Random.Next(random_chars.Length)];
        }
        return new(fieldName);
    }

    /// <summary>
    /// 生成随机字符串，长度为固定传入字符串
    /// </summary>
    /// <param name="length">要生成的字符串长度</param>
    /// <param name="randomChars">随机字符串字符集</param>
    /// <returns></returns>
    protected static string GenerateRandomString(int length = 6,
        string randomChars = random_chars)
    {
        var random = Random;
        var result = new char[length];
        if (random.Next(256) % 2 == 0)
            for (var i = length - 1; i >= 0; i--) // 5 4 3 2 1 0
                EachGenerate(i);
        else
            for (var i = 0; i < length; i++) // 0 1 2 3 4 5
                EachGenerate(i);
        return new string(result);
        void EachGenerate(int i)
        {
            var index = random.Next(0, randomChars.Length);
            var temp = RandomCharAt(randomChars, index);
            static char RandomCharAt(string s, int index)
            {
                if (index == s.Length) index = 0;
                else if (index > s.Length) index %= s.Length;
                return s[index];
            }
            result[i] = temp;
        }
    }
}

/// <summary>
/// 基于 GeneratedAttribute 的源生成模板
/// </summary>
/// <typeparam name="TGeneratedAttribute">生成特性模型</typeparam>
/// <typeparam name="TSourceModel">生成源文件参数模型</typeparam>
public abstract class GeneratedAttributeTemplateBase<TGeneratedAttribute, TSourceModel> : TemplateBase, IIncrementalGenerator
    where TGeneratedAttribute : notnull
    where TSourceModel : GeneratedAttributeTemplateBase<TGeneratedAttribute, TSourceModel>.ISourceModel
{
    /// <summary>
    /// 从源码中读取并分析生成器所需要的模型
    /// </summary>
    public interface ISourceModel
    {
        /// <summary>
        /// 命名空间
        /// </summary>
        string Namespace { get; }

        /// <summary>
        /// 类型名
        /// </summary>
        string TypeName { get; }

        /// <summary>
        /// 生成特性模型
        /// </summary>
        TGeneratedAttribute Attribute { get; }
    }

    /// <summary>
    /// typeof(TGeneratedAttribute).Name.TrimEnd("GeneratedAttribute")
    /// </summary>
    protected virtual string Id => typeof(TGeneratedAttribute).Name.TrimEnd("GeneratedAttribute");

    /// <summary>
    /// typeof(TGeneratedAttribute).FullName
    /// </summary>
    protected virtual string AttrName => typeof(TGeneratedAttribute).FullName;

    /// <summary>
    /// 根据 <see cref="AttributeData"/> 还原 TGeneratedAttribute 数据
    /// </summary>
    /// <param name="attributes"></param>
    /// <returns></returns>
    protected abstract TGeneratedAttribute GetAttribute(ImmutableArray<AttributeData> attributes);

#pragma warning disable SA1307 // Accessible fields should begin with upper-case letter
#pragma warning disable SA1604 // Element documentation should have summary

    /// <summary>
    /// 获取 <see cref="ISourceModel"/> 需要的参数数据
    /// </summary>
    protected record struct GetSourceModelArgs
    {
        /// <see cref="SourceProductionContext"/>
        public SourceProductionContext spc;

        /// <see cref="GeneratorAttributeSyntaxContext"/>
        public GeneratorAttributeSyntaxContext m;

        /// <see cref="INamedTypeSymbol"/>
        public INamedTypeSymbol symbol;

        /// <summary>
        /// 命名空间
        /// </summary>
        public string @namespace;

        /// <summary>
        /// 类型名
        /// </summary>
        public string typeName;

        /// <summary>
        /// 调用 <see cref="GetAttribute(ImmutableArray{AttributeData})"/> 的返回值
        /// </summary>
        public TGeneratedAttribute attr;
    }

#pragma warning restore SA1604 // Element documentation should have summary
#pragma warning restore SA1307 // Accessible fields should begin with upper-case letter

    /// <summary>
    /// 业务实现获取 <see cref="ISourceModel"/>
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    protected abstract TSourceModel GetSourceModel(GetSourceModelArgs args);

    /// <summary>
    /// 是否跳过生成器执行函数
    /// </summary>
    protected bool IgnoreExecute { get; set; }

    /// <summary>
    /// 通用增量源生成器执行函数
    /// </summary>
    /// <param name="spc"></param>
    /// <param name="m"></param>
    protected virtual void Execute(SourceProductionContext spc, GeneratorAttributeSyntaxContext m)
    {
#if DEBUG
        var thisTypeName = GetType().Name;
        Console.WriteLine($"{thisTypeName} Execute");
#endif
        try
        {
            if (m.TargetSymbol is not INamedTypeSymbol symbol)
                return;

            var @namespace = symbol.ContainingNamespace.ToDisplayString();
            if (string.Equals("<global namespace>", @namespace, StringComparison.OrdinalIgnoreCase))
                @namespace = string.Empty;
            var typeName = symbol.Name;

            var attr = GetAttribute(symbol.GetAttributes());

            if (IgnoreExecute)
                return;

            var model = GetSourceModel(new()
            {
                spc = spc,
                m = m,
                symbol = symbol,
                @namespace = @namespace,
                typeName = typeName,
                attr = attr,
            });
            if (IgnoreExecute || model is null)
                return;
            ExecuteCore(spc, model);
        }
#pragma warning disable CS0168 // 声明了变量，但从未使用过
        catch (Exception ex)
#pragma warning restore CS0168 // 声明了变量，但从未使用过
        {
#if DEBUG
            Console.WriteLine(ex);
#endif
        }
    }

#if DEBUG
    void ConsoleWriteSourceText(string sourceTextString)
    {
        var thisTypeName = GetType().Name;
        Console.WriteLine();
        Console.WriteLine($"{thisTypeName}: ");
        Console.WriteLine(sourceTextString);

        switch (FileId) // 在 case 断点查看生成的源码字符串
        {
            case "ConstantsByPath":
                break;
            case "SettingsProperty":
                break;
            case "SingletonPartition":
                break;
            case "ViewModelWrapper":
                break;
            case "IpcClient":
                break;
            case "IpcServer":
                break;
            case "Designer": // ResXGeneratedCodeAttribute
                break;
        }
    }
#endif

    /// <summary>
    /// 通用增量源生成器执行函数
    /// </summary>
    /// <param name="spc"></param>
    /// <param name="m"></param>
    protected virtual void ExecuteCore(SourceProductionContext spc, TSourceModel m)
    {
#if DEBUG
        var thisTypeName = GetType().Name;
        Console.WriteLine($"{thisTypeName} ExecuteCore");
#endif
        SourceText sourceText;
        try
        {
            using var memoryStream = new MemoryStream();
            try
            {
                WriteFile(memoryStream, m);
            }
            catch (OperationCanceledException)
            {
#if DEBUG
                Console.WriteLine($"{thisTypeName} OperationCanceledException");
#endif
                return;
            }
            sourceText = SourceText.From(memoryStream, canBeEmbedded: true);
#if DEBUG
            ConsoleWriteSourceText(sourceText.ToString());
#endif
        }
        catch (Exception ex)
        {
            StringBuilder builder = new();
            builder.Append("Namespace: ");
            builder.AppendLine(m.Namespace);
            builder.Append("TypeName: ");
            builder.AppendLine(m.TypeName);
            builder.AppendLine();
            builder.AppendLine(ex.ToString());
            var sourceTextString = builder.ToString();
            sourceText = SourceText.From(sourceTextString, Encoding.UTF8);
#if DEBUG
            ConsoleWriteSourceText(sourceTextString);
#endif
        }
        spc.AddSource($"{(string.IsNullOrEmpty(m.Namespace) ? "global_namespace" : m.Namespace)}.{m.TypeName}.{FileId}.g.cs", sourceText);
    }

    /// <summary>
    /// 该模板生成源文件名中的唯一名称，默认使用 <see cref="Id"/>，可重写替换
    /// </summary>
    protected virtual string FileId => Id;

    /// <summary>
    /// 源生成器写入文件流执行逻辑
    /// </summary>
    /// <param name="stream"></param>
    /// <param name="m"></param>
    protected abstract void WriteFile(Stream stream, TSourceModel m);

    /// <inheritdoc/>
    void IIncrementalGenerator.Initialize(IncrementalGeneratorInitializationContext context)
    {
        try
        {
            var fullyQualifiedMetadataName = AttrName;
            var source = context.SyntaxProvider.ForAttributeWithMetadataName(
                fullyQualifiedMetadataName,
                static (_, _) => true,
                static (content, _) => content);
            context.RegisterSourceOutput(source, Execute);
#if DEBUG
            var thisTypeName = GetType().Name;
            Console.WriteLine($"{thisTypeName} Initialized, AttrName: {AttrName}, Id: {Id}, FileId: {FileId}.");
#endif
        }
#pragma warning disable CS0168 // 声明了变量，但从未使用过
        catch (Exception ex)
#pragma warning restore CS0168 // 声明了变量，但从未使用过
        {
#if DEBUG
            Console.WriteLine(ex);
#endif
        }
    }
}