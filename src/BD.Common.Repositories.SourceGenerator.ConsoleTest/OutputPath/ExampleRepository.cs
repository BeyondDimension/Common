#nullable enable
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由包 BD.Common.Repositories.SourceGenerator 源生成。
//     运行时版本：4.8.9139.0
//     编译器版本：4.6.0-3.23259.8 (c3cc1d0c)
//     生成器版本：1.23.10613.11400 (c239958a)
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
// ReSharper disable once CheckNamespace
namespace BD.Common.Repositories.SourceGenerator.ConsoleTest.Repositories;

/// <summary>
/// 示例 - 仓储层实现类
/// </summary>
public sealed partial class ExampleRepository<TDbContext> : Repository<TDbContext, Example, Guid>, IExampleRepository where TDbContext : DbContext, IAcceleratorDbContext
{
    readonly IMapper mapper;
    readonly ISysUserRepository sysUserRepo;
    readonly ASDASDRepository aSDASDRepo;

    public ExampleRepository(
        TDbContext dbContext,
        IRequestAbortedProvider requestAbortedProvider,
        IMapper mapper,
        ISysUserRepository sysUserRepo,
        ASDASDRepository aSDASDRepo) : base(dbContext, requestAbortedProvider)
    {
        this.mapper = mapper;
        this.sysUserRepo = sysUserRepo;
        this.aSDASDRepo = aSDASDRepo;
    }

    /// <summary>
    /// 分页查询示例表格
    /// </summary>
    /// <param name="title">标题</param>
    /// <param name="disable">是否禁用</param>
    /// <param name="fileName">文件名</param>
    /// <param name="url">访问地址</param>
    /// <param name="createUser">创建人（创建此条目的后台管理员）</param>
    /// <param name="creationTime">创建时间</param>
    /// <param name="operatorUser">最后一次操作的人（记录后台管理员禁用或启用或编辑该条的操作）</param>
    /// <param name="name">名称</param>
    /// <param name="email">邮箱</param>
    /// <param name="architecture">Architecture</param>
    /// <param name="gender">性别</param>
    /// <param name="nickName">昵称</param>
    /// <param name="current">当前页码，页码从 1 开始，默认值：<see cref="IPagedModel.DefaultCurrent"/></param>
    /// <param name="pageSize">页大小，如果为 0 必定返回空集合，默认值：<see cref="IPagedModel.DefaultPageSize"/></param>
    /// <returns>示例分页表格查询结果数据</returns>
    public async Task<PagedModel<TableExampleDTO>> QueryAsync(
        string? title,
        bool? disable,
        string? fileName,
        string? url,
        string? createUser,
        DateTimeOffset[]? creationTime,
        string? operatorUser,
        string? name,
        string? email,
        Architecture? architecture,
        Gender? gender,
        string? nickName,
        int current = IPagedModel.DefaultCurrent,
        int pageSize = IPagedModel.DefaultPageSize)
    {
        var query = Entity.AsNoTrackingWithIdentityResolution()
            .OrderByDescending(x => x.CreationTime).ThenBy(x => x.Id)
            .AsQueryable();
        if (!string.IsNullOrEmpty(title))
            query = query.Where(x => x.Title.Contains(title));
        if (disable.HasValue)
            query = query.Where(x => x.Disable == disable.Value);
        if (!string.IsNullOrEmpty(fileName))
            query = query.Where(x => x.FileName.Contains(fileName));
        if (!string.IsNullOrEmpty(url))
            query = query.Where(x => x.Url.Contains(url));
        if (!string.IsNullOrEmpty(createUser))
            if (ShortGuid.TryParse(createUser, out Guid createUserId))
                query = query.Where(x => x.CreateUser!.Id == createUserId);
            else
                query = query.Where(x => x.CreateUser!.NickName!.Contains(createUser));
        if (creationTime != null)
            query = creationTime.Length switch
            {
                1 => query.Where(x => x.CreationTime >= creationTime[0]),
                2 => query.Where(x => x.CreationTime >= creationTime[0] && x.CreationTime <= creationTime[1]),
                _ => query,
            };
        if (!string.IsNullOrEmpty(operatorUser))
            if (ShortGuid.TryParse(operatorUser, out Guid operatorUserId))
                query = query.Where(x => x.OperatorUser!.Id == operatorUserId);
            else
                query = query.Where(x => x.OperatorUser!.NickName!.Contains(operatorUser));
        if (!string.IsNullOrEmpty(name))
            query = query.Where(x => x.Name.Contains(name));
        if (!string.IsNullOrEmpty(email))
            query = query.Where(x => x.Email.Contains(email));
        if (architecture.HasValue)
            query = query.Where(x => x.Architecture == architecture.Value);
        if (gender.HasValue)
            query = query.Where(x => x.Gender == gender.Value);
        if (!string.IsNullOrEmpty(nickName))
            query = query.Where(x => x.NickName.Contains(nickName));
        var r = await query
            .Select(x => new TableExampleDTO()
            {
                Id = x.Id,
                Title = x.Title,
                Disable = x.Disable,
                FileName = x.FileName,
                Url = x.Url,
                CreateUserId = x.CreateUser!.Id,
                CreateUser = x.CreateUser!.NickName,
                CreationTime = x.CreationTime,
                OperatorUserId = x.OperatorUser!.Id,
                OperatorUser = x.OperatorUser!.NickName,
                Name = x.Name,
                Email = x.Email,
                Architecture = x.Architecture,
                Gender = x.Gender,
                NickName = x.NickName,
            })
            .PagingAsync(current, pageSize, RequestAborted);
        return r;
    }

    /// <summary>
    /// 获取用于【选择框/下拉列表(Select)】的数据
    /// </summary>
    /// <param name="takeCount">要获取的最大数量限制，默认值：<see cref="SelectItemDTO.Count"/></param>
    /// <returns>用于【选择框/下拉列表(Select)】的数据</returns>
    public async Task<SelectItemDTO<Guid>[]> GetSelectAsync(int takeCount = SelectItemDTO.Count)
    {
        var query = Entity.AsNoTrackingWithIdentityResolution();
        var r = await query
            .OrderByDescending(x => x.CreationTime).ThenBy(x => x.Id)
            .Select(x => new SelectItemDTO<Guid>
            {
                Id = x.Id,
                Title = x.Title,
            })
            .Take(takeCount).ToArrayAsync();
        return r;
    }

    /// <summary>
    /// 根据【提供查询功能的数据源】设置【是否禁用】
    /// </summary>
    /// <param name="query">提供查询功能的数据源</param>
    /// <param name="disable">是否禁用，当值为 <see langword="true"/> 时禁用，为 <see langword="false"/> 时启用</param>
    /// <returns>受影响的行数</returns>
    public async Task<int> SetDisableAsync(IQueryable<Example> query, bool disable)
    {
        var r = await query.ExecuteUpdateAsync(x => x.SetProperty(y => y.Disable, y => disable));
        return r;
    }

    /// <summary>
    /// 根据【主键】设置设置【是否禁用】
    /// </summary>
    /// <param name="operatorUserId">最后一次操作的人（记录后台管理员禁用或启用或编辑该条的操作）</param>
    /// <param name="id">主键</param>
    /// <param name="disable">是否禁用，当值为 <see langword="true"/> 时禁用，为 <see langword="false"/> 时启用</param>
    /// <returns>受影响的行数</returns>
    public async Task<int> SetDisableByIdAsync(Guid? operatorUserId, Guid id, bool disable)
    {
        var r = await Entity.Where(x => x.Id == id)
            .ExecuteUpdateAsync(x => x
                .SetProperty(y => y.Disable, y => disable)
                .SetProperty(y => y.UpdateTime, y => DateTimeOffset.Now)
                .SetProperty(y => y.OperatorUserId, y => operatorUserId)
            );
        return r;
    }

    /// <summary>
    /// 根据主键获取【编辑模型】
    /// </summary>
    /// <param name="id">主键</param>
    /// <returns>编辑模型</returns>
    public async Task<EditExampleDTO?> GetEditByIdAsync(Guid id)
    {
        var query = Entity.AsNoTrackingWithIdentityResolution();
        var r = await query.Where(x => x.Id == id)
            .Select(static x => new EditExampleDTO
            {
                FileName = x.FileName,
                Url = x.Url,
                Name = x.Name,
                AverageScore = x.AverageScore,
                AverageScore2 = x.AverageScore2,
                Email = x.Email,
                Architecture = x.Architecture,
                Describe = x.Describe,
                DisableReason = x.DisableReason,
                Gender = x.Gender,
                NickName = x.NickName,
                Order = x.Order,
                IsTop = x.IsTop,
                IPAddress = x.IPAddress,
                Password = x.Password,
                Remarks = x.Remarks,
                SmsCode = x.SmsCode,
            })
            .FirstOrDefaultAsync(RequestAborted);
        return r;
    }

    /// <summary>
    /// 根据【编辑模型】更新一条数据
    /// </summary>
    /// <param name="operatorUserId">最后一次操作的人（记录后台管理员禁用或启用或编辑该条的操作）</param>
    /// <param name="id">主键</param>
    /// <param name="model">编辑模型</param>
    /// <returns>受影响的行数</returns>
    public async Task<int> UpdateAsync(Guid? operatorUserId, Guid id, EditExampleDTO model)
    {
        var query = Entity.AsNoTrackingWithIdentityResolution();
        var r = await query.Where(x => x.Id == id)
            .ExecuteUpdateAsync(x => x
                .SetProperty(y => y.UpdateTime, y => DateTimeOffset.Now)
                .SetProperty(y => y.OperatorUserId, y => operatorUserId)
                .SetProperty(y => y.FileName, y => model.FileName)
                .SetProperty(y => y.Url, y => model.Url)
                .SetProperty(y => y.Name, y => model.Name)
                .SetProperty(y => y.AverageScore, y => model.AverageScore)
                .SetProperty(y => y.AverageScore2, y => model.AverageScore2)
                .SetProperty(y => y.Email, y => model.Email)
                .SetProperty(y => y.Architecture, y => model.Architecture)
                .SetProperty(y => y.Describe, y => model.Describe)
                .SetProperty(y => y.DisableReason, y => model.DisableReason)
                .SetProperty(y => y.Gender, y => model.Gender)
                .SetProperty(y => y.NickName, y => model.NickName)
                .SetProperty(y => y.Order, y => model.Order)
                .SetProperty(y => y.IsTop, y => model.IsTop)
                .SetProperty(y => y.IPAddress, y => model.IPAddress)
                .SetProperty(y => y.Password, y => model.Password)
                .SetProperty(y => y.Remarks, y => model.Remarks)
                .SetProperty(y => y.SmsCode, y => model.SmsCode)
            );
        return r;
    }

    /// <summary>
    /// 根据【添加模型】新增一条数据
    /// </summary>
    /// <param name="model">添加模型</param>
    /// <returns>受影响的行数</returns>
    public async Task<int> InsertAsync(AddExampleDTO model)
    {
        Example entity = new()
        {
            Title = model.Title,
            Disable = model.Disable,
            FileName = model.FileName,
            Url = model.Url,
            Name = model.Name,
            AverageScore = model.AverageScore,
            AverageScore2 = model.AverageScore2,
            Email = model.Email,
            Architecture = model.Architecture,
            Describe = model.Describe,
            DisableReason = model.DisableReason,
            Gender = model.Gender,
            NickName = model.NickName,
            Order = model.Order,
            IsTop = model.IsTop,
            IPAddress = model.IPAddress,
            Password = model.Password,
            Remarks = model.Remarks,
            SmsCode = model.SmsCode,
        };
        await Entity.AddAsync(entity);
        var r = await db.SaveChangesAsync();
        return r;
    }

}

