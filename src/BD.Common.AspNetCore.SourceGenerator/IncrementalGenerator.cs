using BD.Common.SourceGenerator.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Diagnostics;
using System.Text;
using System.Text.Json;

namespace BD.Common.SourceGenerator;

[Generator]
public sealed class IncrementalGenerator : IIncrementalGenerator
{
    const string jsonFileName = "table_design_app.json";

    static AppSettings? FromSourceText(SourceText? sourceText)
    {
        if (sourceText == null) return null;
        try
        {
            using var s = new MemoryStream();
            using var w = new StreamWriter(s);
            sourceText.Write(w);
            s.Position = 0;
            var appSettings = JsonSerializer.Deserialize(s, AppSettingsContext.Instance.AppSettings);
            return appSettings;
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            return null;
        }
    }

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var files = context.AdditionalTextsProvider
            .Where(static file => file.Path.EndsWith(jsonFileName));

        context.RegisterSourceOutput(files, (sourceProductionContext, file) =>
        {
            var appSettings = FromSourceText(file.GetText());
            if (appSettings == null) return;

            foreach (var entityMetadata in appSettings.Entities)
            {
                using var entityFileMemoryStream = new MemoryStream();

                entityFileMemoryStream.Write("""
                    #nullable enable
                    // <auto-generated/>
                    // ReSharper disable once CheckNamespace
                    namespace 
                    """u8);
                entityFileMemoryStream.Write(appSettings.Namespace);
                entityFileMemoryStream.Write("""
                    ;
                    [Table("
                    """u8);
                entityFileMemoryStream.Write(entityMetadata.GetTableName());
                entityFileMemoryStream.Write("""
                    ")]
                    public sealed partial class 
                    """u8);
                var typeName = Encoding.UTF8.GetBytes(entityMetadata.TypeName);
                entityFileMemoryStream.Write(typeName);
                entityFileMemoryStream.Write("""
                    {

                    """u8);

                bool hasCreationTime = false, hasDescribe = false, hasDisable = false,
                hasDisableReason = false, hasGender = false, hasNickName = false,
                hasOrder = false, hasIsTop = false, hasIPAddress = false,
                hasPassword = false, hasRemarks = false, hasSmsCode = false,
                hasSoftDeleted = false, hasTenantId = false, hasTitle = false,
                hasUpdateTime = false, hasCreateUserId = false, hasCreateUserIdNullable = false,
                hasOperatorUserId = false;

                foreach (var entityProperty in entityMetadata.Properties)
                {
                    Action<Stream> writeSummary;
                    Action<Stream> writeTypeName;
                    Action<Stream> writePropertyName;
                    Action<Stream>? writeDefaultValue = null;
                    bool required = entityProperty.Required;

                    #region Interface Columns

                    if (entityProperty.IsCreationTime())
                    {
                        hasCreationTime = true;
                        writeSummary = static s => s.Write("创建时间"u8);
                        writeTypeName = s => s.Write("DateTimeOffset"u8);
                        writePropertyName = s => s.Write("CreationTime"u8);
                    }
                    else if (entityProperty.IsDescribe())
                    {
                        hasDescribe = true;
                        writeSummary = static s => s.Write("描述"u8);
                        writeTypeName = s => s.Write("string?"u8);
                        writePropertyName = s => s.Write("Describe"u8);
                    }
                    else if (entityProperty.IsDisable())
                    {
                        hasDisable = true;
                        writeSummary = static s => s.Write("是否禁用"u8);
                        writeTypeName = s => s.Write("bool"u8);
                        writePropertyName = s => s.Write("Disable"u8);
                    }
                    else if (entityProperty.IsDisableReason())
                    {
                        hasDisableReason = true;
                        writeSummary = static s => s.Write("禁用原因"u8);
                        writeTypeName = s => s.Write("string?"u8);
                        writePropertyName = s => s.Write("DisableReason"u8);
                    }
                    else if (entityProperty.IsGender())
                    {
                        hasGender = true;
                        writeSummary = static s => s.Write("性别"u8);
                        writeTypeName = s => s.Write("Gender"u8);
                        writePropertyName = s => s.Write("Gender"u8);
                    }
                    else if (entityProperty.IsNickName())
                    {
                        hasNickName = true;
                        writeSummary = static s => s.Write("昵称"u8);
                        writeTypeName = s => s.Write("string?"u8);
                        writePropertyName = s => s.Write("NickName"u8);
                    }
                    else if (entityProperty.IsOrder())
                    {
                        hasOrder = true;
                        writeSummary = static s => s.Write("排序"u8);
                        writeTypeName = s => s.Write("long"u8);
                        writePropertyName = s => s.Write("Order"u8);
                    }
                    else if (entityProperty.IsIsTop())
                    {
                        hasIsTop = true;
                        writeSummary = static s => s.Write("是否置顶"u8);
                        writeTypeName = s => s.Write("bool"u8);
                        writePropertyName = s => s.Write("IsTop"u8);
                    }
                    else if (entityProperty.IsIPAddress())
                    {
                        hasIPAddress = true;
                        required = true;
                        writeSummary = static s => s.Write("IP 地址"u8);
                        writeTypeName = s => s.Write("string"u8);
                        writePropertyName = s => s.Write("IPAddress"u8);
                        writeDefaultValue = static s => s.Write("\"\""u8);
                    }
                    else if (entityProperty.IsPassword())
                    {
                        hasPassword = true;
                        required = true;
                        writeSummary = static s => s.Write("密码"u8);
                        writeTypeName = s => s.Write("string"u8);
                        writePropertyName = s => s.Write("Password"u8);
                        writeDefaultValue = static s => s.Write("\"\""u8);
                    }
                    else if (entityProperty.IsRemarks())
                    {
                        hasRemarks = true;
                        writeSummary = static s => s.Write("备注"u8);
                        writeTypeName = s => s.Write("string?"u8);
                        writePropertyName = s => s.Write("Remarks"u8);
                    }
                    else if (entityProperty.IsSmsCode())
                    {
                        hasSmsCode = true;
                        writeSummary = static s => s.Write("短信验证码"u8);
                        writeTypeName = s => s.Write("string?"u8);
                        writePropertyName = s => s.Write("SmsCode"u8);
                    }
                    else if (entityProperty.IsSoftDeleted())
                    {
                        hasSoftDeleted = true;
                        writeSummary = static s => s.Write("是否软删除"u8);
                        writeTypeName = s => s.Write("bool"u8);
                        writePropertyName = s => s.Write("SoftDeleted"u8);
                    }
                    else if (entityProperty.IsTenantId())
                    {
                        hasTenantId = true;
                        writeSummary = static s => s.Write("租户 Id"u8);
                        writeTypeName = s => s.Write("Guid"u8);
                        writePropertyName = s => s.Write("TenantId"u8);
                    }
                    else if (entityProperty.IsTitle())
                    {
                        hasTitle = true;
                        required = true;
                        writeSummary = static s => s.Write("标题"u8);
                        writeTypeName = s => s.Write("string"u8);
                        writePropertyName = s => s.Write("Title"u8);
                        writeDefaultValue = static s => s.Write("\"\""u8);
                    }
                    else if (entityProperty.IsUpdateTime())
                    {
                        hasUpdateTime = true;
                        writeSummary = static s => s.Write("更新时间"u8);
                        writeTypeName = s => s.Write("DateTimeOffset"u8);
                        writePropertyName = s => s.Write("UpdateTime"u8);
                    }
                    else if (entityProperty.IsCreateUserId())
                    {
                        writeSummary = static s => s.Write("创建人（创建此条目的后台管理员）"u8);
                        if (entityProperty.TypeName.OICEquals("Guid"))
                        {
                            hasCreateUserId = true;
                            writeTypeName = s => s.Write("Guid"u8);
                        }
                        else
                        {
                            hasCreateUserIdNullable = true;
                            writeTypeName = s => s.Write("Guid?"u8);
                        }
                        writePropertyName = s => s.Write("CreateUserId"u8);
                    }
                    else if (entityProperty.IsOperatorUserId())
                    {
                        hasOperatorUserId = true;
                        writeSummary = static s => s.Write("最后一次操作的人（记录后台管理员禁用或启用或编辑该条的操作）"u8);
                        writeTypeName = s => s.Write("Guid?"u8);
                        writePropertyName = s => s.Write("OperatorUserId"u8);
                    }
                    else
                    {
                        writeSummary = s =>
                        {
                            var summary = entityProperty.Summary;
                            if (!string.IsNullOrWhiteSpace(summary))
                                s.Write(summary!);
                        };
                        writeTypeName = s => s.Write(entityProperty.TypeName);
                        writePropertyName = s => s.Write(entityProperty.PropertyName);
                        if (!string.IsNullOrWhiteSpace(entityProperty.DefaultValue))
                        {
                            writeDefaultValue = s => s.Write(entityProperty.DefaultValue!);
                        }
                        else if (entityProperty.TypeName.OICEquals("string"))
                        {
                            required = true;
                            writeDefaultValue = static s => s.Write("\"\""u8);
                        }
                    }

                    #endregion

                    #region Summary/CommentAttribute

                    entityFileMemoryStream.Write("""
                            /// <summary>
                            /// 
                        """u8);
                    writeSummary(entityFileMemoryStream);
                    entityFileMemoryStream.Write("""

                            /// </summary>
                            [Comment("
                        """u8);
                    writeSummary(entityFileMemoryStream);
                    entityFileMemoryStream.Write("""
                        ")]

                        """u8);

                    #endregion

                    #region PrecisionAttribute

                    if (entityProperty.Precision.HasValue)
                    {
                        var precision = Encoding.UTF8.GetBytes(entityProperty.Precision.Value.ToString());
                        entityFileMemoryStream.Write("""
                                [Precision(
                            """u8);
                        entityFileMemoryStream.Write(precision);
                        if (entityProperty.PrecisionScale.HasValue)
                        {
                            entityFileMemoryStream.Write(", "u8);
                            var precisionScale = Encoding.UTF8.GetBytes(entityProperty.PrecisionScale.Value.ToString());
                            entityFileMemoryStream.Write(precisionScale);
                        }

                        entityFileMemoryStream.Write("""
                            )]
                            """u8);
                    }

                    #endregion

                    #region RequiredAttribute

                    if (required)
                    {
                        entityFileMemoryStream.Write("""
                                [Required] // EF not null

                            """u8);
                    }

                    #endregion

                    #region Property Get/Set

                    entityFileMemoryStream.Write("""
                            public 
                        """u8);
                    writeTypeName(entityFileMemoryStream);
                    entityFileMemoryStream.Write(" "u8);
                    writePropertyName(entityFileMemoryStream);
                    entityFileMemoryStream.Write("""
                              { get; set; }
                        """u8);
                    if (writeDefaultValue != null)
                    {
                        entityFileMemoryStream.Write(" = "u8);
                        writeDefaultValue(entityFileMemoryStream);
                        entityFileMemoryStream.Write("""
                            ;
                            """u8);
                    }
                    entityFileMemoryStream.Write("\r\n\r\n"u8);

                    #endregion
                }

                entityFileMemoryStream.Write("""

                    }
                    """u8);

                #region BaseType

                bool writtenbaseType = false, isFirstWriteBaseType = true;

                void WriteBaseType()
                {
                    if (!writtenbaseType)
                    {
                        entityFileMemoryStream!.Write("partial class "u8);
                        entityFileMemoryStream!.Write(typeName!);
                        entityFileMemoryStream!.Write(" : "u8);
                        writtenbaseType = true;
                    }
                    if (isFirstWriteBaseType)
                    {
                        isFirstWriteBaseType = false;
                    }
                    else
                    {
                        entityFileMemoryStream.Write(", "u8);
                    }
                }

                if (hasCreationTime)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("ICreationTime"u8);
                }
                if (hasDescribe)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("IDescribe"u8);
                }
                if (hasDisable)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("IDisable"u8);
                }
                if (hasDisableReason)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("IDisableReason"u8);
                }
                if (hasGender)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("IGender"u8);
                }
                if (hasNickName)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("INickName"u8);
                }
                if (hasOrder)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("IOrder"u8);
                }
                if (hasIsTop)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("IIsTop"u8);
                }
                if (hasIPAddress)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("BD.Common.Columns.IPAddress"u8);
                }
                if (hasPassword)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("IPassword"u8);
                }
                if (hasRemarks)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("IRemarks"u8);
                }
                if (hasSmsCode)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("ISmsCode"u8);
                }
                if (hasSoftDeleted)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("ISoftDeleted"u8);
                }
                if (hasTenantId)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("ITenant"u8);
                }
                if (hasTitle)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("ITitle"u8);
                }
                if (hasNickName)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("INickName"u8);
                }
                if (hasNickName)
                {
                    WriteBaseType();
                    entityFileMemoryStream.Write("INickName"u8);
                }

                if (writtenbaseType)
                {
                    entityFileMemoryStream.Write(" { }\r\n"u8);
                }

                #endregion

                sourceProductionContext.AddSource(
                    $"{entityMetadata.TypeName}.class.g.cs",
                    SourceText.From(entityFileMemoryStream, Encoding.UTF8, canBeEmbedded: true));
            }
        });
    }
}
